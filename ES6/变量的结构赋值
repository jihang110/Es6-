1.数组的结构赋值
let [a, b, c] = [1, 2, 3];
上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。
...表示一个数组
允许默认值
  let [foo = true] = [];
  foo // true
  如果一个数组成员不严格等于undefined，默认值是不会生效的。
  let [x = 1] = [undefined];
  x // 1
2.对象的解构赋值
  let { foo, bar } = { foo: "aaa", bar: "bbb" };
  foo // "aaa"
  bar // "bbb"
对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；
而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。

  如果变量名与属性名不一致，必须写成下面这样。
  let { foo: baz } = { foo: 'aaa', bar: 'bbb' };
  baz // "aaa"

  let obj = { first: 'hello', last: 'world' };
  let { first: f, last: l } = obj;
  f // 'hello'
  l // 'world'
实际上是let { foo: foo, bar: bar } = { foo: "aaa", bar: "bbb" };

由于数组本身是特殊的对象，所以可以
  let arr = [1, 2, 3];
  let {0 : first, [arr.length - 1] : last} = arr;
  first // 1
  last // 3
3.字符串的解构赋值
  字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。
  let {length : len} = 'hello';
  len // 5
  直接可以获取其length属性
4.数值和布尔值的解构赋值
  解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。
  数值和布尔值的包装对象都有toString属性，解构赋值的规则是，只要等号右边的值不是对象或数组，
  就先将其转为对象
5.函数参数的解构赋值
  function add([x, y]){
  return x + y;
  }
  add([1, 2]); // 3

  [[1, 2], [3, 4]].map(([a, b]) => a + b);   // [ 3, 7 ]

  undefined就会触发函数参数的默认值。
  [1, undefined, 3].map((x = 'yes') => x) // [ 1, 'yes', 3 ]

注意：结构最好不要用()来进行结构

6.用途
 1）交换变量
 let x = 1;
 let y = 2;
 [x, y] = [y, x];
 2）从函数返回多个值
 // 返回一个数组
  function example() {
    return [1, 2, 3];
  }
  let [a, b, c] = example();
 3）函数参数的定义
 // 参数是一组有次序的值
  function f([x, y, z]) { ... }
  f([1, 2, 3]);
  // 参数是一组无次序的值
  function f({x, y, z}) { ... }
  f({z: 3, y: 2, x: 1});
  4）提取JSON数据
  let jsonData = {
  id: 42,
  status: "OK",
  data: [867, 5309]
  };
  let { id, status, data: number } = jsonData;
  console.log(id, status, number) // 42, "OK", [867, 5309]
  5）函数参数的默认值
  6）遍历Map结构
  const map = new Map();
  map.set('first', 'hello');
  map.set('second', 'world');
  for (let [key, value] of map) {
    console.log(key + " is " + value);
  }
  // first is hello
  // second is world
  7）输入模块的指定方法
  const { SourceMapConsumer, SourceNode } = require("source-map");
