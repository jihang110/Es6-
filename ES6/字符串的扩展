1.字符的 Unicode 表示法
  1）四字节表示法
  JavaScript 允许采用\uxxxx形式表示一个字符，其中xxxx表示字符的 Unicode 码点。
  "\u0061"   // "a"
  这种表示方法在\u0000~\uFFFF之间，超出的用双字节的形式
  "\uD842\uDFB7" // "𠮷"
  如果直接在\u后面跟上超过0xFFFF的数值（比如\u20BB7），JavaScript会理解成\u20BB+7
  "\u20BB7" // " 7"
  2）大括号表示法
  "\u{20BB7}"// "𠮷"
  "\u{41}\u{42}\u{43}"// "ABC"
  let hello = 123;
  hell\u{6F} // 123
  '\u{1F680}' === '\uD83D\uDE80'  // true
  3）一共有6中表示法
  '\z' === 'z'  // true
  '\172' === 'z' // true
  '\x7A' === 'z' // true
  '\u007A' === 'z' // true
  '\u{7A}' === 'z' // true
2.codePointAt()正确显示字符的码点
  let s = '𠮷a';
  s.codePointAt(0) // 134071
  s.codePointAt(1) // 57271
  s.codePointAt(2) // 97
  转化为16进制后用'\u{20bb7}'
  let s = '𠮷a';
  for (let ch of s) {
    console.log(ch.codePointAt(0).toString(16));
  }
  // 20bb7
  // 61

  检查是否是由四节组成
  function is32Bit(c) {
    return c.codePointAt(0) > 0xFFFF;
  }
3.String.fromCodePoint()码点返回正确的字符
  String.fromCodePoint(0x20BB7)// "𠮷"
  String.fromCodePoint(0x5b63)
4.字符串的遍历器接口
for (let ss of 'foo') {
  console.log(ss)
}
// "f"  // "o"  // "o"
5.at()
  charAt()该方法不能识别码点大于0xFFFF的字符。
  'abc'.charAt(0) // "a"
  '𠮷'.charAt(0) // "\uD842"
  at方法，可以识别 Unicode 编号大于0xFFFF的字符，返回正确的字符。
  'abc'.at(0) // "a"
  '𠮷'.at(0) // "𠮷"
6.normalize()
  ES6 提供字符串实例的normalize()方法，用来将字符的不同表示方法统一为同样的形式，
  这称为 Unicode 正规化。
7.includes(), startsWith(), endsWith()
  includes()：返回布尔值，表示是否找到了参数字符串。
  startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。
  endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。
