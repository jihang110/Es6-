let和const
let只在声明的代码块内有用
不存在提升变量（即变量可以在声明之前使用，值为undefined）
在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。
不允许重复声明

Es6的块级作用域
相当于立即执行函数（IIFE）
块级作用域可以用do表达式使其有返回值
let x = do {
  let t = f();
  t * t + 1;
};

const变量
1.const声明一个只读的常量。一旦声明，常量的值就不能改变。
const PI = 3.1415;
PI // 3.1415
PI = 3;
// TypeError: Assignment to constant variable.
2.const一旦声明变量，就必须立即初始化，不能留到以后赋值。
3.作用域与let相同。只在声明的块里有用
4.本质
const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单
类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。
但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，
const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。
因此，将一个对象声明为常量必须非常小心。
const foo = {};
// 为 foo 添加一个属性，可以成功
foo.prop = 123;
foo.prop // 123
// 将 foo 指向另一个对象，就会报错
foo = {}; // TypeError: "foo" is read-only

ES6声明变量有六种方法：var，function,let，const,class,import
顶层对象 浏览器是window node是指global
